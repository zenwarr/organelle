import {ConfigOption, StorageDatabase} from "./storage-db";
import {isValidTemplate, TemplateProcessor} from "./formatter";
import * as path from "path";
import * as fs from 'fs-extra';

const DEF_FILE_TEMPLATE = '{author} - {title}';
const DEF_DB_FILENAME = 'storage.db';

export class FileSystemStorage {
  get root(): string {
    return this._root;
  }

  get db(): StorageDatabase {
    return this._db;
  }

  get defaultFileTemplate(): string {
    let template = this._db.getOption(ConfigOption.DefaultFileTemplate);
    return template ? template : DEF_FILE_TEMPLATE;
  }

  set defaultFileTemplate(template: string) {
    if (!template || !isValidTemplate(template)) {
      throw new Error('Cannot set file template for storage: template is invalid');
    }

    this._db.setOption(ConfigOption.DefaultFileTemplate, template);
  }

  static async load(root: string): Promise<FileSystemStorage> {
    let db = new StorageDatabase(path.join(root, DEF_DB_FILENAME));
    await db.open();
    return new FileSystemStorage(root, db);
  }

  static async create(root: string): Promise<FileSystemStorage> {
    let db = new StorageDatabase(path.join(root, DEF_DB_FILENAME));
    await db.create();
    return new FileSystemStorage(root, db);
  }

  async importObject(srcFilename: string, proc: TemplateProcessor): Promise<void> {
    if (!srcFilename || !path.isAbsolute(srcFilename)) {
      throw new Error(`Cannot import the object into the storage: source file path is invalid [${srcFilename}]`);
    }

    let targetFilename = proc.process(this.defaultFileTemplate);
    if (targetFilename) {
      if (path.isAbsolute(targetFilename)) {
        throw new Error(`Cannot import the object into the storage: path generated by template is absolute, not relative [${targetFilename}]`);
      }
      targetFilename = path.join(this.root, targetFilename);

      let srcExt = path.extname(srcFilename);
      if (srcExt) {
        targetFilename += srcExt;
      }

      return copyFile(srcFilename, targetFilename);
    } else {
      throw new Error('Cannot import the object into the storage: no path generated by template');
    }
  }

  /** Protected area **/

  protected _root: string;
  protected _db: StorageDatabase;

  protected constructor(root: string, db: StorageDatabase) {
    this._root = root;
    this._db = db;
  }
}

async function copyFile(src: string, dest: string): Promise<void> {
  return fs.copy(src, dest);
}
